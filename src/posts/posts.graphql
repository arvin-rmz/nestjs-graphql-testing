scalar Upload

type File {
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
  files: [File!]!
  user: User!
}

input PostCreateInput {
  title: String!
  content: String!
  files: [Upload!]!
}

type UserError {
  message: String!
  code: String!
}

# type UserErrors {
#   message: String!
# }

type PostPayload {
  userErrors: [UserError!]!
  post: Post
}

# type PostPayloadSuccess {
#   post: Post!
# }

union PostResult = Post | UserError

# union PostsResult = [Post] | UserError

input FileUploadInput {
  title: String!
  content: String!
  files: [Upload!]!
}

type Query {
  post(id: ID): Post
  posts: [Post]
}

type Mutation {
  postCreate(postCreateInput: PostCreateInput!): PostPayload!
  fileUpload(files: FileUploadInput!): Boolean!
  # fileUpload(files: [Upload!]!): Boolean!
}
